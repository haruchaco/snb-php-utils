<?php
namespace mychaelstyle\queue\providers;
require_once 'queue/Factory.php';
require_once 'queue/providers/AmazonSQS.php';

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-07-23 at 08:21:06.
 */
class AmazonSQSTest extends \mychaelstyle\TestBase
{
  /**
   * @var AmazonSQS
   */
  protected $object;
  /**
   * @var string provider dsn
   */
  protected $dsn;
  /**
   * @var string $uri
   */
  protected $uri;
  /**
   * @var string provider connect options
   */
  protected $options = array();

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp()
  {
    parent::setUp();
    if(!$this->hasAvailableNetwork()){
      return false;
    }
    // set your aws key and secret to your env
    $this->dsn = 'AmazonSQS://REGION_'.$_SERVER['AWS_REGION_NAME'].'/tests';
    $this->uri = $_SERVER['AWS_REGION_NAME'].'/tests';
    $this->options = array(
      'key' => $_SERVER['AWS_KEY'],
      'secret' => $_SERVER['AWS_SECRET'],
      'default_cache_config' => '',
      'certificate_autority' => false
    );
    // curl options
    $this->options['curlopts'] = array(CURLOPT_SSL_VERIFYPEER => false);
    $this->object = new AmazonSQS;
    $this->object->connect($this->uri,$this->options);
    while(!is_null($ret = $this->object->peek())){
      $this->object->remove();
    }
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown()
  {
    parent::tearDown();
    $this->object->disconnect();
  }

  /**
   * @covers mychaelstyle\queue\providers\AmazonSQS::connect
   * @covers mychaelstyle\queue\providers\AmazonSQS::offer
   * @covers mychaelstyle\queue\providers\AmazonSQS::peek
   * @covers mychaelstyle\queue\providers\AmazonSQS::remove
   * @covers mychaelstyle\queue\providers\AmazonSQS::getServiceName
   * @covers mychaelstyle\queue\providers\AmazonSQS::disconnect
   */
  public function testStarndardOffer()
  {
    if($this->markIncompleteIfNoNetwork()){
      return true;
    }
    // offer test
    $message = 'This is test queue!';
    $this->object->offer($message);

    // peek
    $result = $this->object->peek();
    $this->assertEquals($message,$result);
    $result = $this->object->remove();
    // removed check
    $result = $this->object->peek();
    $this->assertNull($result);

    // big size data limit
    $msg = "0123456789abcdef";
    $expected = $msg;
    while(strlen($expected)<(1024*256)){
      $expected .= $msg;
    }
    $this->object->offer($expected);
    $result = $this->object->peek();
    $this->assertEquals($expected,$result);
    $result = $this->object->remove();
    // removed check
    $result = $this->object->peek();
    $this->assertNull($result);

  }

  /**
   * @covers mychaelstyle\queue\providers\AmazonSQS::connect
   * @covers mychaelstyle\queue\providers\AmazonSQS::offer
   * @covers mychaelstyle\queue\providers\AmazonSQS::peek
   * @covers mychaelstyle\queue\providers\AmazonSQS::remove
   * @covers mychaelstyle\Exception::__construct
   * @expectedException mychaelstyle\Exception
   */
  public function testOfferOverSize(){
    if($this->markIncompleteIfNoNetwork()){
      return true;
    }
    $msg = "0123456789abcdef";
    $expected = $msg;
    while(strlen($expected)<(1024*258)){
      $expected .= $msg;
    }
    $this->object->offer($expected);
  }

  /**
   * @covers mychaelstyle\queue\providers\AmazonSQS::connect
   * @covers mychaelstyle\queue\providers\AmazonSQS::poll
   * @covers mychaelstyle\queue\providers\AmazonSQS::offer
   * @covers mychaelstyle\queue\providers\AmazonSQS::peek
   * @covers mychaelstyle\queue\providers\AmazonSQS::remove
   */
  public function testOfferMap()
  {
    if($this->markIncompleteIfNoNetwork()){
      return true;
    }
    $expected = array(
      'first_name' => 'Taro',
      'last_name'  => 'Suzuki'
    );
    $this->object->offer($expected);
    $result = (array) $this->object->poll();
    $this->assertEquals($expected,$result);
    $result = $this->object->poll();
    $this->assertNull($result);

  }

}
