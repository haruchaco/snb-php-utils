<?php
namespace mychaelstyle\mail;

require_once DIR_LIBS.'/mail/MimePart.php';
require_once DIR_LIBS.'/Mail.php';

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-08-30 at 09:40:46.
 */
class MimePartTest extends \PHPUnit_Framework_TestCase
{
  /**
   * @var MimePart
   */
  protected $object;
  /**
   * @var test mail headers map
   */
  protected $headers = array();
  /**
   * @var test mail address
   */
  protected $email;
  /**
   * @var test mobile mail address
   */
  protected $mb_mail;
  /**
   * @var test mail subject
   */
  protected $textMailSubject = null;
  /**
   * @var test mail body
   */
  protected $textMailBody    = null;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp()
  {
    parent::setUp();
    $this->object = new MimePart();
    $this->email  = $_SERVER['TEST_EMAIL'];
    $this->mb_mail = $_SERVER['TEST_MBMAIL'];
    $textTpl = file(DIR_FIXTURES.'/mail/mail.txt');
    $this->textMailSubject = trim(array_shift($textTpl));
    $this->textMailBody    = implode("",$textTpl);
    $this->headers = array(
      'From'        => $this->email,
      'To'          => $this->email,
      'Reply-To'    => $this->email,
      'Return-Path' => $this->email
    );
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown()
  {
    parent::tearDown();
  }

  protected function execSend(MimePart $mime,array $optionalHeaders=array()){
    $text = $mime->get();
    $to   = $this->email;
    $elms = explode(CRLF.CRLF,$text);
    $hr   = array_shift($elms);
    $bd   = implode(CRLF.CRLF,$elms);
    $headers = array();
    foreach($this->headers as $k => $v){
      $headers[] = $k.': '.$v;
    }
    foreach($optionalHeaders as $k => $v){
      $headers[] = $k.': '.$v;
    }
    $headers[] = $hr;
    $header = implode("\r\n",$headers);
    $subject = $mime->getEncodedHeader('Subject');
echo "\n\n======================================================================\n\n";
echo $header."\n\n";
echo $bd."\n\n";
    mail($to,$subject,$bd,$header);
  }
  /**
   * @covers mychaelstyle\mail\MimePart::__construct
   * @covers mychaelstyle\mail\MimePart::get
   */
  public function testSendText(){
    $mime = $this->object;
    $mime->setContent($this->textMailBody,MimePart::T_TEXT,MimePart::ENC_QP,'UTF-8');
    $mime->headers['Subject'] = $this->textMailSubject;
    $this->execSend($mime);
  }

  /**
   * @covers mychaelstyle\mail\MimePart::__construct
   * @covers mychaelstyle\mail\MimePart::addChild
   * @covers mychaelstyle\mail\MimePart::get
   * @covers mychaelstyle\mail\MimePart::getEncodedHeader
   * @covers mychaelstyle\mail\MimePart::hasRelatedContents
   * @covers mychaelstyle\mail\MimePart::hasHtmlPart
   * @covers mychaelstyle\mail\MimePart::getSendEncoding
   */
  public function testSendTextAttachement(){
    // prepare
    $mime = $this->object;
    $mime->headers['Subject'] = 'テキストテストメール 添付付き';
    $this->object->encSendText = 'UTF-8';
    // text part
    $textPart = new MimePart();
    $textPart->setContent($this->textMailBody,MimePart::T_TEXT,MimePart::ENC_QP,'UTF-8');
    $textPart->body = $this->textMailBody;
    $mime->addChild($textPart);
    // attachement file
    $attach = new MimeBin();
    $attach->setFile(DIR_FIXTURES.'/photo.jpg',MimeBin::T_JPG);
    $this->object->addChild($attach);
    // send
    $optionalHeaders = array(
      'MIME-Version'              => '1.0',
      'Content-Transfer-Encoding' => '7bit'
    );
    $this->execSend($mime,$optionalHeaders);
  }

  /**
   * @covers mychaelstyle\mail\MimePart::__construct
   * @covers mychaelstyle\mail\MimePart::addChild
   * @covers mychaelstyle\mail\MimePart::get
   * @covers mychaelstyle\mail\MimePart::getEncodedHeader
   * @covers mychaelstyle\mail\MimePart::hasRelatedContents
   * @covers mychaelstyle\mail\MimePart::hasHtmlPart
   * @covers mychaelstyle\mail\MimePart::getSendEncoding
   */
  public function testSendHtml(){
    // main part
    $mime = $this->object;
    $mime->headers['Subject'] = 'HTMLテストメール';
    $mime->encSendText = 'UTF-8';
    // text part
    $textPart = new MimePart();
    $textPart->body = $this->textMailBody;
    $testPart->encSendText = 'UTF-8';
    $mime->addChild($textPart);
    // html part
    $htmlPart = new MimePart(MimePart::T_HTML);
    $htmlPart->body = file_get_contents(DIR_FIXTURES.'/mail/mail.html');
    $htmlPart->encSendText = 'UTF-8';
    $htmlPart->encTransfer = 'base64';
    $mime->addChild($htmlPart);
    // send
    $optionalHeaders = array(
      'MIME-Version'              => '1.0',
      'Content-Transfer-Encoding' => '7bit'
    );
    $this->execSend($mime,$optionalHeaders);
  }

}
