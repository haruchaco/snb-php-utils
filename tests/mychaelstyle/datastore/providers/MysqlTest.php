<?php
namespace mychaelstyle\datastore\providers;
require_once 'datastore/providers/Mysql.php';

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-07-23 at 20:50:14.
 */
class MysqlTest extends \mychaelstyle\TestBase
{
  /**
   * @var Mysql
   */
  protected $object;
  /**
   * @var string provider dsn
   */
  protected $dsn;
  /**
   * @var string $uri
   */
  protected $uri;
  /**
   * @var string provider connect options
   */
  protected $options = array();

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp()
  {
    parent::setUp();
    $this->object = new Mysql;
    // set your aws key and secret to your env
    $this->uri = 'localhost:3306/test/m_datastore';
    $this->dsn = 'Mysql://'.$this->uri;
    $this->options = array(
      'user' => 'root',
      'pass' => '',
    );
    // curl options
    $this->object = new Mysql;
    $this->object->connect($this->uri,$this->options);

    // create test db
    $dsn = 'mysql:dbname=test;host=localhost;port=3306';
    $conn = new \PDO($dsn,'root','',array(\PDO::MYSQL_ATTR_INIT_COMMAND => 'SET NAMES utf8') );
    $conn->setAttribute(\PDO::ATTR_ERRMODE, \PDO::ERRMODE_EXCEPTION );
    $conn->setAttribute(\PDO::ATTR_TIMEOUT, (defined('MYSQL_TIMEOUT') ? MYSQL_TIMEOUT : 5));
    
    $sql = 'CREATE TABLE IF NOT EXISTS m_datastore ( id varchar(255) not null unique, body text null, updated_at timestamp null) ENGINE=InnoDB character set=utf8';
    $conn->exec($sql);
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown()
  {
    parent::tearDown();
    $this->object->disconnect();
  }

  /**
   * @covers mychaelstyle\datastore\providers\Mysql::write
   * @covers mychaelstyle\datastore\providers\Mysql::batchWrite
   * @covers mychaelstyle\datastore\providers\Mysql::get
   * @covers mychaelstyle\datastore\providers\Mysql::batchGet
   * @covers mychaelstyle\datastore\providers\Mysql::remove
   * @covers mychaelstyle\datastore\providers\Mysql::batchRemove
   * @covers mychaelstyle\datastore\providers\Mysql::connect
   * @covers mychaelstyle\datastore\providers\Mysql::disconnect
   * @covers mychaelstyle\datastore\providers\Mysql::__construct
   */
  public function testFlow()
  {
    $table = 'm_datastore';
    $t = time();
    $expected = array(
      $table => array(
        array(
          'id' => 'AAAA0001',
          'updated_at' => date('Y-m-d H:i:s'),
          'body' => 'This is test!',
        )
      )
    );
    $expectedKeys = array('id'=>'AAAA0001');

    // write
    $this->object->write($table,$expected[$table][0]);

    // get
    $result = $this->object->get($table,$expectedKeys);
    $this->assertEquals($expected[$table][0],$result);

    // remove
    $this->object->remove($table,$expectedKeys);
    $result = $this->object->get($table,$expectedKeys);
    $this->assertNull($result,print_r($result,true));

    // batch write
    $this->object->batchWrite($expected);

    // batchGet
    $result = $this->object->batchGet(
      array(
        $table=>array(
          $expectedKeys
        )
      )
    );
    $this->assertEquals($expected,$result);

    // batch remove
    $result = $this->object->batchRemove(
      array(
        $table=>array(
          $expectedKeys
        )
      )
    );
    $result = $this->object->get($table,$expectedKeys);
    $this->assertNull($result);
  }
}
