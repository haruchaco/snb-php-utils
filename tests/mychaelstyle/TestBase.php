<?php
namespace mychaelstyle;
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-07-10 at 18:46:48.
 */
class TestBase extends \PHPUnit_Framework_TestCase
{
  /**
   * network
   */
  protected static $network = null;
  /**
   * test file org path
   */
  protected $org_example;
  /**
   * path local
   */
  protected $path_example;
  /**
   * テスト用example.txtのURI
   */
  protected $uri_example;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp()
  {
    parent::setUp();
    if(is_dir(DIR_WORK)){
      chmod(DIR_WORK,0777);
    } else {
      mkdir(DIR_WORK,0777);
    }
    if(is_dir(DIR_TMP)){
      chmod(DIR_TMP,0777);
    } else {
      mkdir(DIR_TMP,0777);
    }
    $this->org_example = DIR_FIXTURES.'/example.txt';
    $this->uri_example  = '/testdir/child/example.txt';
    $this->path_example = DIR_WORK.$this->uri_example;
    $pathDir = dirname($this->path_example);
    // workフォルダにコピー
    if(!is_dir($pathDir)){
      mkdir($pathDir,0777,true);
    }
    copy($this->org_example,DIR_WORK.$this->uri_example);
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown()
  {
    $this->removeDirectory(DIR_WORK); 
    $this->removeDirectory(DIR_TMP); 
    parent::tearDown();
  }
  /**
   * remove directory
   */
  protected function removeDirectory($path){
    if(is_dir($path) && strlen($path)>strlen(DIR_TEST)){
      chmod($path,0755);
      $files = scandir($path);
      foreach($files as $file){
        if(strpos($file,'.')===0){
        } else {
          $tp = $path.(preg_match('/\/$/',$path)>0 ? '' : '/').$file;
          if(is_dir($tp)){
            $this->removeDirectory($tp);
          } else if(is_file($tp)){
            unlink($tp);
          }
        }
      }
      @rmdir($path);
    }
  }

  /**
   * mark incomplete if no network
   */
  protected function markIncompleteIfNoNetwork(){
    if($this->hasAvailableNetwork()){
      return false;
    }
    $this->markTestIncomplete(
      'No available network now.'
    );
    return true;
  }
  /**
   * has available network
   */
  protected function hasAvailableNetwork(){
    if(is_null(self::$network)){
      $checkUrl = 'https://github.com/mychaelstyle/php-utils';
      $result = $this->httpRequest($checkUrl);
      if('OK'==$result['result']){
        self::$network = true;
      } else {
        self::$network = false;
      }
    }
    return self::$network;
  }
  /**
   * encode contents
   * @param array $contentsMap contents key value map
   * @param string $encode 'json' / 'form', default 'form'
   */
  protected function encodeContents(array $contentsMap=array(), $encode='form'){
    if('json'==strtolower($encode)){
      return json_encode($contentsMap);
    } else {
      return http_build_query($contentsMap);
    }
  }
  /**
   * http request
   * @param string $url url
   * @param array $contentsMap
   * @param string $method
   * @param string $encode
   */
  protected function httpRequest($url,$contentsMap=null,$method='get',$encode='form'){

    $options = array(
      CURLOPT_RETURNTRANSFER => true,
      CURLOPT_HEADER         => true,
      CURLOPT_FOLLOWLOCATION => true,
      CURLOPT_ENCODING       => "",
      CURLOPT_USERAGENT      => 'SNB Test User Agent',
      CURLOPT_AUTOREFERER    => true,
      CURLOPT_CONNECTTIMEOUT => 10,
      CURLOPT_TIMEOUT        => 10,
      CURLOPT_MAXREDIRS      => 10,
      CURLOPT_URL            => $url,
      CURLOPT_SSL_VERIFYPEER => false,
    );

    $method = strtolower($method);
    $contents = is_null($contentsMap) ? null : $this->encodeContents($contentsMap, $encode);
    if('delete'==$method){
      $options[CURLOPT_DELETE] = true;
      $options[CURLOPT_POSTFIELDS] = $contents;
    } else if('put'==$method){
      $options[CURLOPT_PUT] = true;
      $options[CURLOPT_POSTFIELDS] = $contents;
    } else if('post'==$method){
      $options[CURLOPT_POST] = true;
      $options[CURLOPT_POSTFIELDS] = $contents;
    } else if(strlen($contents)>0) {
      $url = ((strpos($url,'?')===false) ? $url.'?' : $url.'&').$contents;
    }

    $ch = curl_init($url);
    curl_setopt_array($ch,$options);
    $content = curl_exec($ch);
    $info    = curl_getinfo($ch);
    $result  = array(
      'result'   => 'NG',
      'url'      => $url,
      'code'     => $info['http_code'],
      'errno'    => curl_errno($ch),
      'error'    => curl_error($ch),
      'info'     => $info,
      'headers'  => array(),
      'body'     => null
    );

    $msg = $method.' '.$url."\n".$contents."\n".print_r($info,true);
    if($content!==false){
      $result['result'] = 'OK';
      $header = substr($content,0,$info['header_size']);
      $body   = substr($content,$info['header_size']);
      $result['body'] = $body;
      $header = str_replace("\r\n","\n",$header);
      $header = str_replace("\r","\n",$header);
      $headerLines = explode("\n",$header);
      $headerMap = array();
      foreach($headerLines as $line){
        if(strpos($line,': ')!==false){
          list($key,$value) = explode(': ',$line);
          if(isset($headerMap[$key]) && is_scalar($headerMap[$key]) && strlen($headerMap[$key])>0){
            $headerMap[$key] = array($headerMap[$key],trim($line));
          } else if(isset($headerMap[$key]) && is_array($headerMap[$key])){
            $headerMap[$key][] = trim($line);
          } else {
            $headerMap[$key] = trim($line);
          }
        }
      }
      $result['headers'] = $headerMap;
    }
    return $result;
  }
  
  /**
   * get example file contents
   * @return string example file contents
   */
  protected function getExampleContents(){
    return file_get_contents($this->org_example);
  }

  /**
   * assert local providers writing
   */
  protected function assertLocalWritten($dsn,$expected,$uri){
    $path = $this->getLocalPathUsingUri($dsn,$uri);
    $result = file_get_contents($path);
    $this->assertEquals($expected,$result);
  }

  /**
   * get local path using dsn and uri.
   * provider\Local
   */
  protected function getLocalPathUsingUri($dsn,$uri){
    $dir = str_replace('local://','',$dsn);
    return $dir.(preg_match('/^\//',$uri)>0 ? '':'/').$uri;
  }

  /**
   * assertion the file is deleted
   */
  protected function assertLocalDeleted($dsn,$uri){
    $dir = str_replace('local://','',$dsn);
    $path = $dir.$uri;
    $this->assertFalse(file_exists($path));
  }

}
