<?php
namespace snb\file\providers;
require_once 'file/providers/AmazonS3.php';
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-07-11 at 18:37:34.
 *
 * You must set env before testing this case.
 * add the following env variables to your environment.
 *
 * <pre>
 * SNB_AWS_PHPSDK="${HOME}/Library/aws-sdk-for-php/sdk.class.php"
 * SNB_AWS_KEY=[your aws key]
 * SNB_AWS_SECRET=[your aws secret]
 * SNB_AWS_S3_BUCKET="your bucket name"
 * SNB_AWS_S3_REGION_NAME="TOKYO"
 * SNB_AWS_S3_REGION_HOST="s3-ap-northeast-1.amazonaws.com"
 * export SNB_AWS_PHPSDK SNB_AWS_KEY SNB_AWS_SECRET SNB_AWS_S3_BUCKET SNB_AWS_REGION_NAME SNB_AWS_S3_REGION_HOST
 * </pre>
 */
class AmazonS3Test extends \PHPUnit_Framework_TestCase
{
  /**
   * @var AmazonS3
   */
  private $object;
  /**
   * DSN
   */
  private $dsn = null;
  /**
   * options
   */
  private $options = array();
  /**
   * test file path
   */
  protected $path_example;
  /**
   * test file uri
   */
  protected $uri = 'example.txt';
  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  public function setUp()
  {
    require_once($_SERVER['SNB_AWS_PHPSDK']);
    $this->path_example = DIR_TEST.'/fixtures/example.txt';
    $this->uri = 'example.txt';
    $this->url = 'https://'.$_SERVER['SNB_AWS_S3_REGION_HOST'].'/'.$_SERVER['SNB_AWS_S3_BUCKET'].'/'.$this->uri;
    $this->object = new AmazonS3;
    // dsn
    $this->dsn = 'amazon_s3://REGION_'.$_SERVER['SNB_AWS_S3_REGION_NAME'].'/'.$_SERVER['SNB_AWS_S3_BUCKET'];
    // set your aws key and secret to your env
    $this->options = array(
      'key' => $_SERVER['SNB_AWS_KEY'],
      'secret' => $_SERVER['SNB_AWS_SECRET'],
      'default_cache_config' => '',
      'certificate_autority' => false
    );
    // connect
    $this->object->connect($this->dsn,$this->options);
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  public function tearDown()
  {
    $this->object->disconnect();
  }

  /**
   * @covers snb\file\providers\AmazonS3::connect
   */
  public function testConnect()
  {
    $this->object->connect($this->dsn,$this->options);
  }

  /**
   * @covers snb\file\providers\AmazonS3::disconnect
   */
  public function testDisconnect()
  {
    $this->object->disconnect();
  }

  /**
   * @covers snb\file\providers\AmazonS3::put
   */
  public function testPut()
  {
    $expected = file_get_contents($this->path_example);
    // put a example file
    $this->object->put($this->path_example,$this->uri,array('contentType'=>'text/plain;charset=UTF8'));
    $result = $this->httpRequest($this->url,null);
    $this->assertEquals($expected,$result['body']);
  }

  /**
   * @covers snb\file\providers\AmazonS3::get
   * @depends testPut
   */
  public function testGet()
  {
    $expected = file_get_contents($this->path_example);
    // get as a file
    $tmp = tempnam(sys_get_temp_dir(),'snb_file_test_');
    $this->object->get($this->uri,$tmp);
    $this->assertEquals($expected,file_get_contents($tmp));
    unlink($tmp);
    // get as strings
    $result = $this->object->get($this->uri);
    $this->assertEquals($expected,$result);
  }

  /**
   * @covers snb\file\providers\AmazonS3::remove
   * @depends testPut
   */
  public function testRemove()
  {
    // remove
    $this->object->remove($this->uri);
    $result = $this->httpRequest($this->url,null);
    $this->assertNotEquals('200',$result['code']);
  }
  /**
   * request
   */
  protected function httpRequest($url,$contentsMap=null,$method='get'){
    $options = array(
      CURLOPT_RETURNTRANSFER => true,
      CURLOPT_HEADER         => true,
      CURLOPT_FOLLOWLOCATION => true,
      CURLOPT_ENCODING       => "",
      CURLOPT_USERAGENT      => 'Test User Agent',
      CURLOPT_AUTOREFERER    => true,
      CURLOPT_CONNECTTIMEOUT => 10,
      CURLOPT_TIMEOUT        => 10,
      CURLOPT_MAXREDIRS      => 10,
      CURLOPT_URL            => $url,
      CURLOPT_SSL_VERIFYPEER => false,
    );
    $strings = '';
    if(!is_null($contentsMap)){
      $strings = '';
      $lines   = array();
      foreach($contentsMap as $key=>$val){
        $line = urlencode($key)."=".urlencode($val);
        $lines[] = $line;
      }
      if(count($lines)>0){
        $strings = implode('&',$lines);
        if('put'==strtolower($method)){
          // todo
        } else if('delete'==strtolower($method)){
          // todo
        } else if('post'==strtolower($method)){
          $options[CURLOPT_POST] = true;
          $options[CURLOPT_POSTFIELDS] = $strings;
        }
      }
    }

    $ch = curl_init($url);
    curl_setopt_array($ch,$options);
    $content = curl_exec($ch);
    $info    = curl_getinfo($ch);
    $result  = array(
      'result'   => 'NG',
      'url'      => $url,
      'code'     => $info['http_code'],
      'errno'    => curl_errno($ch),
      'error'    => curl_error($ch),
      'info'     => $info,
      'headers'  => array(),
      'body'     => null
    );
    $msg = $method.' '.$url."\n".$strings."\n".print_r($info,true);
    if($content!==false){
      $result['result'] = 'OK';
      $header = substr($content,0,$info['header_size']);
      $body   = substr($content,$info['header_size']);
      $result['body'] = $body;
      $header = str_replace("\r\n","\n",$header);
      $header = str_replace("\r","\n",$header);
      $headerLines = explode("\n",$header);
      $headerMap = array();
      foreach($headerLines as $line){
        if(strpos($line,': ')!==false){
          list($key,$value) = explode(': ',$line);
          if(isset($headerMap[$key]) && is_scalar($headerMap[$key]) && strlen($headerMap[$key])>0){
            $headerMap[$key] = array($headerMap[$key],trim($line));
          } else if(isset($headerMap[$key]) && is_array($headerMap[$key])){
            $headerMap[$key][] = trim($line);
          } else {
            $headerMap[$key] = trim($line);
          }
        }
      }
      $result['headers'] = $headerMap;
    }
    return $result;
  }
}
