<?php
namespace snb\file\providers;
require_once 'file/providers/Local.php';

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-07-11 at 08:11:45.
 */
class LocalTest extends \snb\TestBase
{
  /**
   * @var Local
   */
  protected $object;
  /**
   * テスト用example.txtのURI
   */
  protected $uri_example;
  /**
   * path local
   */
  protected $path_example;
  /**
   * test file org path
   */
  protected $org_example;
  /**
   * Valid DSN
   * 正常接続できるDSN
   */
  protected $dsn;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp()
  {
    parent::setUp();
    $this->uri_example  = '/testdir/child/example.txt';
    $this->org_example = DIR_TEST.'/fixtures/example.txt';
    $this->dsn = 'local://'.DIR_TEST.'/work';
    // workフォルダにコピー
    $this->path_example = DIR_TEST.'/work'.$this->uri_example;
    if(!is_dir(dirname($this->path_example))){
      mkdir(dirname($this->path_example),0777,true);
    }
    @copy($this->org_example,DIR_TEST.'/work'.$this->uri_example);
    // new
    $this->object = new Local;
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown()
  {
    $fpath = DIR_TEST.'/work/'.$this->uri_example;
    if(file_exists($fpath)){
      unlink($fpath);
    }
    parent::tearDown();
  }

  /**
   * connect
   */
  protected function connect(){
    $options = array('permission' => 0644);
    $this->object->connect($this->dsn,$options);
  }

  /**
   * @covers snb\file\providers\Local::connect
   * @expectedException snb\file\Exception
   */
  public function testConnectInvalid1()
  {
    // invalid name
    $dsn = 'invalidname://'.DIR_TEST;
    $options = array('permission' => 0644);
    $this->object->connect($dsn,$options);
  }
  /**
   * @covers snb\file\providers\Local::connect
   * @expectedException snb\file\Exception
   */
  public function testConnectInvalid2()
  {
    // no path
    $dsn = 'local://';
    $options = array('permission' => 0644);
    $this->object->connect($dsn,$options);
  }
  /**
   * @covers snb\file\providers\Local::connect
   * @expectedException snb\file\Exception
   */
  public function testConnectInvalid3()
  {
    // no path dir
    $dsn = 'local:///foo/foo/foo';
    $options = array('permission' => 0644);
    $this->object->connect($dsn,$options);
  }

  /**
   * @covers snb\file\providers\Local::connect
   * @covers snb\file\providers\Local::__construct
   */
  public function testConnect()
  {
    $this->object = new Local;
    // valid
    $options = array('permission' => 0644);
    $this->object->connect($this->dsn,$options);
  }

  /**
   * @covers snb\file\providers\Local::connect
   * @covers snb\file\providers\Local::disconnect
   */
  public function testDisconnect()
  {
    $this->object = new Local;
    $expected = new Local;
    // valid
    $this->connect();
    $this->assertNotEquals($expected,$this->object);
    $this->object->disconnect();
    $this->assertEquals($expected,$this->object);
    // reconnect
    $this->connect();
  }

  /**
   * @covers snb\file\providers\Local::get
   * @covers snb\file\providers\Local::getRealPath
   */
  public function testGet()
  {
    $this->connect();
    // 存在しないファイルの読み込みテスト
    $result = $this->object->get('noexist.txt');
    $this->assertNull($result);
    // 正常読み込みテスト
    $expect = file_get_contents($this->org_example);
    $result = $this->object->get($this->uri_example);
    $this->assertEquals($expect,$result,'Get fail.');
    // 保存
    $copyPath = DIR_TEST.'/work/copy.txt';
    $expect = file_get_contents($this->org_example);
    $result = $this->object->get($this->uri_example,$copyPath);
    $this->assertTrue($result);
    $this->assertEquals($expect,file_get_contents($copyPath));
    unlink($copyPath);
  }

  /**
   * @covers snb\file\providers\Local::put
   * @covers snb\file\providers\Local::getRealPath
   */
  public function testPut()
  {
    $putUri = 'put.txt';
    $expectedPath = DIR_TEST.'/work/put.txt';
    $this->connect();
    // 転送テスト
    $this->object->put($this->org_example,$putUri);
    $this->assertTrue(file_exists($expectedPath));
    $this->assertEquals(file_get_contents($this->org_example),file_get_contents($expectedPath));
    $perms = fileperms($expectedPath);
    $this->assertEquals('0644',substr(sprintf('%o',$perms),-4));
    unlink($expectedPath);
    // パーミッションテスト
    $this->object->put($this->org_example,$putUri,array('permission'=>0666));
    $perms = fileperms($expectedPath);
    $this->assertEquals('0666',substr(sprintf('%o',$perms),-4));
    unlink($expectedPath);
    $this->object->put($this->org_example,$putUri,array('permission'=>0600));
    $perms = fileperms($expectedPath);
    $this->assertEquals('0600',substr(sprintf('%o',$perms),-4));
    unlink($expectedPath);
  }

  /**
   * @covers snb\file\providers\Local::remove
   * @covers snb\file\providers\Local::getRealPath
   */
  public function testRemove()
  {
    $putUri = 'put.txt';
    $expectedPath = DIR_TEST.'/work/put.txt';
    $this->connect();
    $this->object->put($this->org_example,$putUri);
    // 最初はある
    $result = $this->object->get($putUri);
    $this->assertNotNull($result);
    // 削除後はない
    $this->object->remove($putUri);
    $result = $this->object->get($putUri);
    $this->assertNull($result);
    $this->assertFalse(file_exists($expectedPath));
  }
}
